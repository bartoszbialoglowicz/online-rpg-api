# Generated by Django 4.2.1 on 2025-04-27 13:37

import api.models
import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_new', models.BooleanField(default=True)),
                ('date_joined', models.DateField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('armor', models.IntegerField(default=0)),
                ('magicResist', models.IntegerField(default=0)),
                ('criticalHitChance', models.DecimalField(decimal_places=2, default=0.05, max_digits=5)),
                ('criticalHitDamage', models.DecimalField(decimal_places=2, default=1.5, max_digits=5)),
                ('health', models.IntegerField(default=100)),
                ('damage', models.IntegerField(default=10)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CollectableItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('goldValue', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Dialog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('event_id', models.CharField(blank=True, max_length=100, null=True)),
                ('starter', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Enemy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('health', models.IntegerField()),
                ('armor', models.IntegerField()),
                ('magicResist', models.IntegerField()),
                ('damage', models.IntegerField()),
                ('criticalHitChance', models.DecimalField(decimal_places=2, default=0.05, max_digits=5)),
                ('criticalHitDamage', models.DecimalField(decimal_places=2, default=1.5, max_digits=5)),
                ('lvl', models.IntegerField()),
                ('exp', models.IntegerField(default=10)),
                ('imgSrc', models.ImageField(blank=True, null=True, upload_to=api.models.upload_to)),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('itemType', models.CharField(choices=[('helmet', 'helmet'), ('armor', 'armor'), ('gloves', 'gloves'), ('boots', 'boots'), ('trousers', 'trousers'), ('weapon', 'weapon')], max_length=100, null=True)),
                ('armor', models.IntegerField(default=0)),
                ('magicResist', models.IntegerField(default=0)),
                ('health', models.IntegerField(default=0)),
                ('damage', models.IntegerField(default=0)),
                ('criticalHitChance', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('criticalHitDamage', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('goldValue', models.IntegerField(default=0)),
                ('imageUrl', models.ImageField(blank=True, null=True, upload_to=api.models.upload_to)),
                ('rarity', models.CharField(choices=[('common', 'common'), ('rare', 'rare'), ('mythic', 'mythic'), ('legendary', 'legendary')], max_length=32)),
                ('lvlRequired', models.IntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('lvlRequired', models.IntegerField()),
                ('description', models.TextField()),
                ('imageUrl', models.ImageField(blank=True, null=True, upload_to=api.models.upload_to)),
                ('xCoordinate', models.IntegerField(default=0)),
                ('yCoordinate', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='NPC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('imageUrl', models.ImageField(upload_to='')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.location')),
            ],
        ),
        migrations.CreateModel(
            name='Potion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('hpValue', models.IntegerField()),
                ('goldValue', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Quest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('main', 'main'), ('side', 'side')], default='main', max_length=10)),
                ('description', models.TextField()),
                ('gold_reward', models.IntegerField(blank=True, null=True)),
                ('exp_reward', models.IntegerField(default=0)),
                ('item_reward', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.item')),
            ],
        ),
        migrations.CreateModel(
            name='QuestRequirement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('kill', 'Kill'), ('collect', 'Collect'), ('explore', 'Explore'), ('talk', 'Talk')], max_length=10)),
                ('amount', models.IntegerField(blank=True, null=True)),
                ('target_object_id', models.PositiveIntegerField()),
                ('position', models.PositiveIntegerField(default=1)),
                ('path', models.PositiveIntegerField(default=1)),
                ('is_last', models.BooleanField(default=False)),
                ('quest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requirements', to='api.quest')),
                ('target_content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('type', models.CharField(choices=[('weapon', 'weapon'), ('alchemist', 'alchemist')], max_length=64)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.location')),
                ('npc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.npc')),
            ],
        ),
        migrations.CreateModel(
            name='UserLvl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lvl', models.IntegerField(unique=True)),
                ('expPoints', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='UserQuest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('progress', models.CharField(choices=[('completed', 'completed'), ('in_progress', 'in_progress'), ('not_started', 'not_started')], default='not_started', max_length=20)),
                ('quest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.quest')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserQuestRequirement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('progress', models.CharField(choices=[('completed', 'completed'), ('in_progress', 'in_progress'), ('not_started', 'not_started')], default='not_started', max_length=20)),
                ('amount_progress', models.IntegerField(default=0)),
                ('requirement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.questrequirement')),
                ('user_quest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requirements', to='api.userquest')),
            ],
        ),
        migrations.CreateModel(
            name='UserPotions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('potion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.potion')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('travelTime', models.DateTimeField(default=datetime.datetime(2025, 4, 27, 13, 37, 25, 468878, tzinfo=datetime.timezone.utc))),
                ('startTravelTime', models.DateTimeField(default=datetime.datetime(2025, 4, 27, 13, 37, 25, 468892, tzinfo=datetime.timezone.utc))),
                ('location', models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, to='api.location')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserItems',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.item')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserCollectableItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('collectableItem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.collectableitem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('totalAmount', models.IntegerField()),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.store')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SubLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('imageUrl', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('parent_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sublocations', to='api.location')),
            ],
        ),
        migrations.CreateModel(
            name='StorePotion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.IntegerField()),
                ('potion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.potion')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.store')),
            ],
        ),
        migrations.CreateModel(
            name='StoreItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.IntegerField()),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.item')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.store')),
            ],
        ),
        migrations.CreateModel(
            name='StoreCollectableItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.IntegerField()),
                ('collectableItem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.collectableitem')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.store')),
            ],
        ),
        migrations.CreateModel(
            name='Resources',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gold', models.IntegerField(default=100)),
                ('exp', models.IntegerField(default=0)),
                ('lvl', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='api.userlvl')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LocationEnemy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enemy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.enemy')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.location')),
            ],
        ),
        migrations.CreateModel(
            name='LocationElement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('npc', 'NPC'), ('enemy', 'Enemy'), ('object', 'Interactive Object'), ('item', 'Item'), ('location', 'Location')], max_length=10)),
                ('position_x', models.IntegerField()),
                ('position_y', models.IntegerField()),
                ('description', models.TextField(blank=True, null=True)),
                ('enemy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.enemy')),
                ('item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.item')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='elements', to='api.location')),
                ('location_element', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.location')),
                ('npc', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.npc')),
                ('sublocation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='elements', to='api.sublocation')),
                ('sublocation_element', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.sublocation')),
            ],
        ),
        migrations.AddField(
            model_name='location',
            name='region',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='api.region'),
        ),
        migrations.CreateModel(
            name='Fight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currentPlayerHP', models.IntegerField()),
                ('currentEnemyHP', models.IntegerField()),
                ('isActive', models.BooleanField(default=False)),
                ('enemy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.enemy')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EnemyLoot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rarity', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0001), django.core.validators.MaxValueValidator(1.0)])),
                ('enemy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.enemy')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.item')),
            ],
        ),
        migrations.AddField(
            model_name='enemy',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.location'),
        ),
        migrations.CreateModel(
            name='DialogOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=255)),
                ('effects', models.JSONField(blank=True, null=True)),
                ('dialog', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='api.dialog')),
                ('next_dialog', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='previous_options', to='api.dialog')),
            ],
        ),
        migrations.AddField(
            model_name='dialog',
            name='npc',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dialogs', to='api.npc'),
        ),
        migrations.CreateModel(
            name='CharacterItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slot', models.CharField(choices=[('helmet', 'helmet'), ('armor', 'armor'), ('gloves', 'gloves'), ('boots', 'boots'), ('trousers', 'trousers'), ('weapon', 'weapon')], default='weapon', max_length=100)),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.character')),
                ('item', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.item')),
            ],
        ),
        migrations.CreateModel(
            name='StoryState',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100)),
                ('value', models.JSONField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='story_states', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'key')},
            },
        ),
    ]
